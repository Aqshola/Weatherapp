{"version":3,"sources":["Components/Searchbox.js","Components/WeatherSection.js","Components/Greeting.js","Components/card.js","Components/cardlist.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBOx","change","click","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","Append","Button","onClick","variant","WeatherSect","data","display","error","city","wind","temp","weather","hum","icon","src","alt","Math","ceil","Greeting","now","Date","getHours","gethour","day","Intl","DateTimeFormat","weekday","month","format","getdate","Cardcom","date","dt_txt","getDate","main","Cardlist","map","el","i","key","App","useState","setCity","currentWeather","setCurrentWeather","forecast","setforecast","setdisplay","fail","setfail","url","onchange","target","value","fetch","then","res","json","name","humidity","speed","catch","err","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3e972b44.chunk.js","sourcesContent":["import { InputGroup, Button, FormControl } from \"react-bootstrap\"\r\nimport React from \"react\"\r\n\r\nexport function SearchBOx({ change, click }) {\r\n  return (\r\n    <div className=\"searchbar\">\r\n      <InputGroup className=\"mb-3\">\r\n        <FormControl\r\n          placeholder=\"Masukan nama kota\"\r\n          aria-label=\"Recipient's username\"\r\n          aria-describedby=\"basic-addon2\"\r\n          onChange={(e) => {\r\n            change(e)\r\n          }}\r\n        />\r\n        <InputGroup.Append>\r\n          <Button onClick={click} variant=\"outline-secondary\">\r\n            Button\r\n          </Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function WeatherSect({ data, display, error }) {\r\n  const { city, wind, temp, weather, hum, icon } = data\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"failed\">\r\n        <img src=\"/Asset/fail.svg\" alt=\"\" />\r\n        <h4>City not found</h4>\r\n      </div>\r\n    )\r\n  } else {\r\n    if (display === true) {\r\n      return (\r\n        <div>\r\n          <div className=\"current-container\">\r\n            <div className=\"current-weather\">\r\n              <div className=\"img\">\r\n                <img src={`/Asset/${icon}.png`} alt=\"\" />\r\n              </div>\r\n              <div className=\"current text\">\r\n                <h6>{weather}</h6>\r\n                <h5>{city}</h5>\r\n              </div>\r\n            </div>\r\n            <div className=\"current-detail\">\r\n              <ul>\r\n                <li className=\"detail-title\">Temprature</li>\r\n                <li>{`${Math.ceil(temp)} °C`}</li>\r\n              </ul>\r\n              <ul>\r\n                <li className=\"detail-title\">Wind</li>\r\n                <li>{`${wind} m/s`}</li>\r\n              </ul>\r\n              <ul>\r\n                <li className=\"detail-title\">Humidity</li>\r\n                <li>{`${hum}%`}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return <h1> </h1>\r\n    }\r\n  }\r\n}\r\n","import React from \"react\"\r\n\r\nexport function Greeting() {\r\n  function gethour() {\r\n    let now = new Date().getHours()\r\n\r\n    if (now > 5 && now < 12) {\r\n      return \"Good Morning\"\r\n    } else if (now >= 12 && now < 18) {\r\n      return \"Good Afternoon\"\r\n    } else if (now >= 18) {\r\n      return \"Good Night\"\r\n    }\r\n  }\r\n  function getdate() {\r\n    let day = new Date()\r\n    let convert = new Intl.DateTimeFormat(\"en-US\", {\r\n      weekday: \"short\",\r\n      day: \"numeric\",\r\n      month: \"long\",\r\n    }).format(day)\r\n\r\n    return convert\r\n  }\r\n  return (\r\n    <div className=\"greeting\">\r\n      <div className=\"greet\">\r\n        <h5>{gethour()}</h5>\r\n      </div>\r\n      <div className=\"date\">\r\n        <h6>{getdate()}</h6>\r\n      </div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function Cardcom({ data }) {\r\n  let date = new Date(data.dt_txt)\r\n  let getDate = new Intl.DateTimeFormat(\"en-US\", {\r\n    weekday: \"short\",\r\n  }).format(date)\r\n\r\n  return (\r\n    <div className=\"cardel\">\r\n      <div className=\"card-txt\">\r\n        <li>\r\n          <b>{getDate}</b>\r\n        </li>\r\n        <li>{`${Math.ceil(data.main.temp)} °C`}</li>\r\n      </div>\r\n      <div className=\"card-weather\">\r\n        <img src={`/Asset/${data.weather[0].icon}.png`} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Cardcom } from \"./card\"\r\n\r\nexport function Cardlist({ data }) {\r\n  try {\r\n    return (\r\n      <div className=\"forecastlist \">\r\n        {data.map((el, i) => {\r\n          if (i % 8 === 0 && i > 0) {\r\n            return <Cardcom key={i} data={data[i]} />\r\n          }\r\n        })}\r\n      </div>\r\n    )\r\n  } catch (error) {\r\n    return <div></div>\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport \"./App.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport { SearchBOx } from \"../Components/Searchbox\"\r\nimport { WeatherSect } from \"../Components/WeatherSection\"\r\nimport { Greeting } from \"../Components/Greeting\"\r\nimport { Cardlist } from \"../Components/cardlist\"\r\n\r\nfunction App() {\r\n  const [city, setCity] = useState(\"\")\r\n  const [currentWeather, setCurrentWeather] = useState([])\r\n  const [forecast, setforecast] = useState([])\r\n  const [display, setdisplay] = useState(false)\r\n  const [fail, setfail] = useState(false)\r\n  const url = [\r\n    `https:api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=0e1d8596d00a9cb7562359634209c46d`,\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=0e1d8596d00a9cb7562359634209c46d`,\r\n  ]\r\n\r\n  onchange = (e) => {\r\n    setCity(e.target.value)\r\n  }\r\n\r\n  function onclick() {\r\n    const [current, forecast] = url\r\n    fetch(current)\r\n      .then((res) => res.json())\r\n      .then((el) => {\r\n        setCurrentWeather(\r\n          {\r\n            city: el.name,\r\n            temp: el.main.temp,\r\n            hum: el.main.humidity,\r\n            wind: el.wind.speed,\r\n            weather: el.weather[0].main,\r\n            icon: el.weather[0].icon,\r\n          },\r\n          setdisplay(true),\r\n          setfail(false)\r\n        )\r\n      })\r\n      .catch((err) => setfail(true))\r\n\r\n    fetch(forecast)\r\n      .then((res) => res.json())\r\n      .then((el) => {\r\n        setforecast(el.list)\r\n      })\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"App\">\r\n        <Greeting />\r\n        <SearchBOx change={onchange} click={onclick} />\r\n        <WeatherSect error={fail} data={currentWeather} display={display} />\r\n        <Cardlist data={forecast} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./Containers/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}